@page "/modeles"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using Shared
@using Shared.ApiModels
@inject IJSRuntime JSRuntime

<PageTitle>Véhicule Modele</PageTitle>

<div class="container">
    <div class="row">
        <div class="col">
            <!-- Text "Top" -->
            <div class="mt-3 d-flex justify-content-between align-items-center">
                <h2 class="mb-0">Modèles</h2>
                <button class="btn btn-success" @onclick="@(OpenAddPopup)">+</button>

            </div>
            <!-- Table -->
            <div class="mt-3">
                <table class="table table-striped table-bordered table-hover">
                    <thead class="thead-dark">
                        <tr>
                            <th>Marque</th>
                            <th>Modèle</th>
                            <th>Fréquence de maintenance</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var model in _model)
                        {
                            <tr>
                                <td>@model.Brand</td>
                                <td>@model.Name</td>
                                <td>@model.MaintenanceFrequency km</td>
                                <td>
                                    <button class="btn btn-info" @onclick="@(()=>OnDetails(model))">Details</button>
                                    <button class="btn btn-secondary" @onclick="@(()=>OpenEditPopup(model))">Editer</button>
                                    <button class="btn btn-danger" @onclick="@(()=>OnDelete(model))">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal fade show " id="myModal" style=" display: @(_modalMode==ModalMode.Closed? "none":"block");">
                <div class="modal-dialog bg-light" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            @if (_modalMode == ModalMode.Add)
                            {
                                <h3>Crer un nouveau modèle</h3>
                            }
                        </div>
                        <div class="modal-body">
                            <form>
                                <div class="form-group">
                                    <label for="modelName">Nom du modèle :</label>
                                    <input type="text" class="form-control" id="modelName" @bind="@NewName" />
                                </div>
                                <div class="form-group">
                                    <label for="modelBrand">Marque :</label>
                                    <select class="form-control" id="modelBrand" @bind="@NewBrand">
                                        @foreach (var brand in Enum.GetValues(typeof(BrandName)))
                                        {
                                            <option value="@brand">@brand.ToString()</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="maintenanceFrequency">Fréquence de maintenance :</label>
                                    <input type="number" class="form-control" id="maintenanceFrequency" @bind="@NewMaintenanceFrequency" />
                                </div>
                                <div class="form-group">
                                    <label for="modelDescription">Description :</label>
                                    <textarea class="form-control" id="modelDescription" rows="3" @bind="@NewDescription"></textarea>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button class="btn-primary" @onclick="@OnSave">Save</button>
                            <button class="btn-primary" @onclick="@OnCancel">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            
        </div>
</div>
</div>


@code {
    private enum ModalMode
    {
        Add,
        Edit,
        Closed
    }

    private ModalMode _modalMode = ModalMode.Closed;

    private ModelModel _selectedModel;

    public string NewName { get; set; }

    public BrandName NewBrand { get; set; }
    
    public int NewMaintenanceFrequency { get; set; }

    public string NewDescription { get; set; }



    public IList<ModelModel> _model;

    protected override async Task OnInitializedAsync()
    {
        _model = await HttpClient.GetFromJsonAsync<IList<ModelModel>>("api/Model");

    }

    private async Task OnDelete(ModelModel model)
    {
        var popupResult = await JSRuntime.InvokeAsync<bool>
            ("confirm", $"Are you sure you want to delete the model '{model.Name}'?");

        if (popupResult == true)
        {
            var httpStatus = await HttpClient.DeleteAsync($"api/Model/{model.Id}");
            if (!httpStatus.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", httpStatus.ReasonPhrase);
            }

        }

        _model = await HttpClient.GetFromJsonAsync<IList<ModelModel>>("api/Model");
    }

    private async Task OpenAddPopup()
    {
        NewName = "";
        _modalMode = ModalMode.Add;
    }

    private async Task OpenEditPopup(ModelModel model)
    {
        _selectedModel = model;
        NewName = model.Name;
        NewBrand = model.Brand;
        NewMaintenanceFrequency = model.MaintenanceFrequency;
        NewDescription = model.Description;

        _modalMode = ModalMode.Edit;
    }

    private async Task OnCancel()
    {
        _modalMode = ModalMode.Closed;
    }

    private async Task OnSave()
    {
        switch (_modalMode)
        {
            case ModalMode.Add:
                await OnAdd();
                break;
            case ModalMode.Edit:
                await OnEdit(_selectedModel);
                break;
        }
    }

    private async Task OnEdit(ModelModel model)
    {
        var editedModel = new ModelModel
            {
                Id = model.Id,
                Name = NewName,
                Brand = NewBrand,
                MaintenanceFrequency = NewMaintenanceFrequency,
                Description = NewDescription
            };

        var response = await HttpClient.PutAsJsonAsync($"api/Model/Edit/{model.Id}?name={Uri.EscapeDataString(NewName)}&brand={Uri.EscapeDataString(NewBrand.ToString())}&maintenanceFrequency={Uri.EscapeDataString(NewMaintenanceFrequency.ToString())}&description={Uri.EscapeDataString(NewDescription)}", editedModel);

        if (!response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", response.ReasonPhrase);
        }
        else
        {
            _modalMode = ModalMode.Closed;
            _model = await HttpClient.GetFromJsonAsync<IList<ModelModel>>("api/Model");
        }
    }

    private async Task OnAdd()
    {
        var model = new ModelModel
            {
                Name = NewName,
                Brand = NewBrand,
                MaintenanceFrequency = NewMaintenanceFrequency,
                Description = NewDescription
            };

        var response = await HttpClient.PostAsync($"api/Model/AddModel?name={Uri.EscapeDataString(NewName)}&brand={Uri.EscapeDataString(NewBrand.ToString())}&maintenanceFrequency={Uri.EscapeDataString(NewMaintenanceFrequency.ToString())}&description={Uri.EscapeDataString(NewDescription)}", null);

        if (!response.IsSuccessStatusCode)
        {
            string responseBody = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("alert", responseBody);  
        }

        _modalMode = ModalMode.Closed;

        _model = await HttpClient.GetFromJsonAsync<IList<ModelModel>>("api/Model");
    }

    private async Task OnDetails(ModelModel model)
    {
        var detailsMessage = $"Modèle : {model.Name}\nMarque : {model.Brand}\nFréquence de maintenance : {model.MaintenanceFrequency} km\nDescription : {model.Description}";

        await JSRuntime.InvokeVoidAsync("alert", detailsMessage);
    }



}